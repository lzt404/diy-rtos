<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\tOS.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\tOS.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Mon Oct 07 16:01:35 2024
<BR><P>
<H3>Maximum Stack Usage =        116 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
idleTaskEntry &rArr; lztInitApp &rArr; halInit &rArr; usartInit &rArr; USART_Init &rArr; RCC_GetClocksFreq
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[6]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SVC_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[39]">ADC3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[42]">DMA2_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[43]">DMA2_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[44]">DMA2_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[45]">DMA2_Channel4_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3a]">FSMC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from hal.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from lztswitch.o(.emb_text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[33]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3b]">SDIO_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3d]">SPI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from lztcpu.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[48]">SystemInit</a> from system_stm32f10x.o(.text) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[c]">TAMPER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[23]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3c]">TIM5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[40]">TIM6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[41]">TIM7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[35]">TIM8_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[38]">TIM8_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[37]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[36]">TIM8_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3e]">UART4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3f]">UART5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[34]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1d]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1e]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from hal.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[49]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[4a]">fputc</a> from hal.o(.text) referenced from printf5.o(i.__0printf$5)
 <LI><a href="#[6e]">idleTaskEntry</a> from lztcore.o(.text) referenced from lztcore.o(.text)
 <LI><a href="#[47]">lztTimerSoftTask</a> from lzttimer.o(.text) referenced from lzttimer.o(.text)
 <LI><a href="#[46]">main</a> from lztcore.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[9e]">task1Entry</a> from app.o(.text) referenced from app.o(.text)
 <LI><a href="#[9f]">task2Entry</a> from app.o(.text) referenced from app.o(.text)
 <LI><a href="#[a0]">task3Entry</a> from app.o(.text) referenced from app.o(.text)
 <LI><a href="#[a1]">task4Entry</a> from app.o(.text) referenced from app.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[49]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[ca]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[4b]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[c7]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[cb]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[cc]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[cd]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[ce]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[cf]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lztswitch.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveAndLoadStackAddr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>lztBitmapInit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lztbitmap.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskSchedInit
</UL>

<P><STRONG><a name="[4f]"></a>lztBitmapPosCount</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lztbitmap.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztBitmapGetFirstSet
</UL>

<P><STRONG><a name="[5e]"></a>lztBitmapSet</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lztbitmap.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskSchedRdy
</UL>

<P><STRONG><a name="[62]"></a>lztBitmapClear</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lztbitmap.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskSchedRemove
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskSchedUnRdy
</UL>

<P><STRONG><a name="[4e]"></a>lztBitmapGetFirstSet</STRONG> (Thumb, 86 bytes, Stack size 4 bytes, lztbitmap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = lztBitmapGetFirstSet
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztBitmapPosCount
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskHighestReady
</UL>

<P><STRONG><a name="[50]"></a>lztTaskHighestReady</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lztcore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lztTaskHighestReady &rArr; lztBitmapGetFirstSet
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztListFirst
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztBitmapGetFirstSet
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskSched
</UL>

<P><STRONG><a name="[52]"></a>lztTaskSchedInit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lztcore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lztTaskSchedInit
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztListInit
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztBitmapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[55]"></a>lztTaskSchedDisable</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lztcore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lztTaskSchedDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskExitCritical
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idleTaskEntry
</UL>

<P><STRONG><a name="[58]"></a>lztTaskSched</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, lztcore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = lztTaskSched &rArr; lztTaskHighestReady &rArr; lztBitmapGetFirstSet
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskSwitch
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskExitCritical
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskEnterCritical
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztHooksTaskSwitch
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskHighestReady
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskDelay
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskDeleteSelf
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskForceDelete
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskWakeUp
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskSuspend
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztSemDestroy
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztSemNotify
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztSemWait
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztMutexDestroy
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztMutexNotify
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztMutexWait
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskSystemTickHandler
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskSchedEnable
</UL>

<P><STRONG><a name="[5b]"></a>lztTaskSchedEnable</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lztcore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = lztTaskSchedEnable &rArr; lztTaskSched &rArr; lztTaskHighestReady &rArr; lztBitmapGetFirstSet
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskExitCritical
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskEnterCritical
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskSched
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idleTaskEntry
</UL>

<P><STRONG><a name="[5c]"></a>lztTaskSchedRdy</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lztcore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lztTaskSchedRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztListAddLast
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztBitmapSet
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskWakeUp
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztMutexDestroy
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztMutexNotify
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztMutexWait
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztEventRemoveAll
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztEventWakeUpTask
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztEventWakeUp
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskInit
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskSystemTickHandler
</UL>

<P><STRONG><a name="[5f]"></a>lztTaskSchedUnRdy</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, lztcore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lztTaskSchedUnRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztListRemove
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztListCount
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztBitmapClear
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskDelay
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskSuspend
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztMutexDestroy
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztMutexNotify
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztMutexWait
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztEventWait
</UL>

<P><STRONG><a name="[63]"></a>lztTaskSchedRemove</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, lztcore.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztListRemove
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztListCount
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztBitmapClear
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskDeleteSelf
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskForceDelete
</UL>

<P><STRONG><a name="[64]"></a>lztTaskDelayedInit</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lztcore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lztTaskDelayedInit
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[65]"></a>lztTimeTaskWait</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lztcore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lztTimeTaskWait
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztListAddLast
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskDelay
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztEventWait
</UL>

<P><STRONG><a name="[66]"></a>lztTimeTaskWakeUp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lztcore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lztTimeTaskWakeUp
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztEventRemoveAll
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztEventWakeUpTask
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztEventWakeUp
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskSystemTickHandler
</UL>

<P><STRONG><a name="[67]"></a>lztTimeTaskRemove</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lztcore.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskForceDelete
</UL>

<P><STRONG><a name="[74]"></a>lztTimeTickInit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lztcore.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[68]"></a>lztTaskSystemTickHandler</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, lztcore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lztTaskSystemTickHandler &rArr; lztTimerModuleTickNotify &rArr; lztSemNotify &rArr; lztEventWakeUp &rArr; lztTimeTaskWakeUp
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTimerModuleTickNotify
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskExitCritical
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskEnterCritical
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztListRemoveFirst
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztListNext
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztListFirst
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztListCount
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztListAddLast
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztHooksSysTick
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztEventRemoveTask
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTimeTaskWakeUp
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskSchedRdy
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskSched
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[6e]"></a>idleTaskEntry</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, lztcore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = idleTaskEntry &rArr; lztInitApp &rArr; halInit &rArr; usartInit &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTimerInitTask
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskExitCritical
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskEnterCritical
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztSetSysTickPeriod
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztInitApp
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztHooksCpuIdle
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskSchedEnable
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskSchedDisable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lztcore.o(.text)
</UL>
<P><STRONG><a name="[d0]"></a>tIdleTask</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lztcore.o(.text), UNUSED)

<P><STRONG><a name="[46]"></a>main</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lztcore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = main &rArr; lztTimerModuleInit &rArr; lztSemInit &rArr; lztEventInit
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTimerModuleInit
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskRunFirst
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskInit
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTimeTickInit
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskDelayedInit
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskSchedInit
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskHighestReady
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[77]"></a>lztEventInit</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, lztevent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lztEventInit
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztSemInit
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztMutexInit
</UL>

<P><STRONG><a name="[78]"></a>lztEventWait</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, lztevent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lztEventWait &rArr; lztTimeTaskWait
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskExitCritical
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskEnterCritical
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztListAddLast
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTimeTaskWait
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskSchedUnRdy
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztSemWait
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztMutexWait
</UL>

<P><STRONG><a name="[79]"></a>lztEventWakeUp</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, lztevent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lztEventWakeUp &rArr; lztTimeTaskWakeUp
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskExitCritical
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskEnterCritical
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztListRemoveFirst
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTimeTaskWakeUp
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskSchedRdy
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztSemNotify
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztMutexNotify
</UL>

<P><STRONG><a name="[7a]"></a>lztEventWakeUpTask</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, lztevent.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskExitCritical
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskEnterCritical
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztListRemove
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTimeTaskWakeUp
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskSchedRdy
</UL>

<P><STRONG><a name="[69]"></a>lztEventRemoveTask</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, lztevent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lztEventRemoveTask
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskExitCritical
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskEnterCritical
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskSystemTickHandler
</UL>

<P><STRONG><a name="[7b]"></a>lztEventRemoveAll</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, lztevent.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskExitCritical
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskEnterCritical
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztListRemoveFirst
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztListCount
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTimeTaskWakeUp
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskSchedRdy
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztSemDestroy
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztMutexDestroy
</UL>

<P><STRONG><a name="[7c]"></a>lztEventWaitCount</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lztevent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lztEventWaitCount
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskExitCritical
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskEnterCritical
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztListCount
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztSemGetInfo
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztSemNotify
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztMutexGetInfo
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztMutexNotify
</UL>

<P><STRONG><a name="[8a]"></a>lztNodeInit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lztlist.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTimerInit
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskInit
</UL>

<P><STRONG><a name="[54]"></a>lztListInit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lztlist.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztEventInit
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTimerModuleInit
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskDelayedInit
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskSchedInit
</UL>

<P><STRONG><a name="[61]"></a>lztListCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lztlist.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTimerCallFuncList
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztEventWaitCount
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztEventRemoveAll
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskSystemTickHandler
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskSchedRemove
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskSchedUnRdy
</UL>

<P><STRONG><a name="[51]"></a>lztListFirst</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lztlist.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTimerCallFuncList
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskSystemTickHandler
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskHighestReady
</UL>

<P><STRONG><a name="[d1]"></a>lztListLast</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lztlist.o(.text), UNUSED)

<P><STRONG><a name="[d2]"></a>lztListPre</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lztlist.o(.text), UNUSED)

<P><STRONG><a name="[6a]"></a>lztListNext</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lztlist.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTimerCallFuncList
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskSystemTickHandler
</UL>

<P><STRONG><a name="[d3]"></a>lztListRemoveAll</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lztlist.o(.text), UNUSED)

<P><STRONG><a name="[d4]"></a>lztListAddFirst</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lztlist.o(.text), UNUSED)

<P><STRONG><a name="[5d]"></a>lztListAddLast</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lztlist.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTimerStart
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztEventWait
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskSystemTickHandler
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTimeTaskWait
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskSchedRdy
</UL>

<P><STRONG><a name="[6b]"></a>lztListRemoveFirst</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, lztlist.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztEventRemoveAll
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztEventWakeUp
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskSystemTickHandler
</UL>

<P><STRONG><a name="[d5]"></a>lztListInsertAfter</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lztlist.o(.text), UNUSED)

<P><STRONG><a name="[60]"></a>lztListRemove</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lztlist.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTimerStop
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTimerCallFuncList
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztEventWakeUpTask
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztEventRemoveTask
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTimeTaskRemove
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTimeTaskWakeUp
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskSchedRemove
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskSchedUnRdy
</UL>

<P><STRONG><a name="[7d]"></a>lztMutexInit</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lztmutex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lztMutexInit &rArr; lztEventInit
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztEventInit
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usartInit
</UL>

<P><STRONG><a name="[7e]"></a>lztMutexWait</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, lztmutex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztEventWait
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskExitCritical
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskEnterCritical
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskSchedUnRdy
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskSchedRdy
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskSched
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printMem
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notifyOtherTask
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processEvent
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;waitEvent
</UL>

<P><STRONG><a name="[7f]"></a>lztMutexNoWaitGet</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, lztmutex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskExitCritical
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskEnterCritical
</UL>

<P><STRONG><a name="[80]"></a>lztMutexNotify</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, lztmutex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztEventWaitCount
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztEventWakeUp
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskExitCritical
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskEnterCritical
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskSchedUnRdy
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskSchedRdy
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskSched
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printMem
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notifyOtherTask
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processEvent
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;waitEvent
</UL>

<P><STRONG><a name="[81]"></a>lztMutexDestroy</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, lztmutex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztEventRemoveAll
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskExitCritical
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskEnterCritical
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskSchedUnRdy
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskSchedRdy
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskSched
</UL>

<P><STRONG><a name="[82]"></a>lztMutexGetInfo</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lztmutex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztEventWaitCount
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskExitCritical
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskEnterCritical
</UL>

<P><STRONG><a name="[83]"></a>lztSemInit</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lztsem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lztSemInit &rArr; lztEventInit
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztEventInit
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTimerModuleInit
</UL>

<P><STRONG><a name="[84]"></a>lztSemWait</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, lztsem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = lztSemWait &rArr; lztEventWait &rArr; lztTimeTaskWait
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztEventWait
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskExitCritical
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskEnterCritical
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskSched
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTimerStop
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTimerStart
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTimerSoftTask
</UL>

<P><STRONG><a name="[85]"></a>lztSemNoWaitGet</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lztsem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskExitCritical
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskEnterCritical
</UL>

<P><STRONG><a name="[86]"></a>lztSemNotify</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, lztsem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = lztSemNotify &rArr; lztEventWakeUp &rArr; lztTimeTaskWakeUp
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztEventWaitCount
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztEventWakeUp
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskExitCritical
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskEnterCritical
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskSched
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTimerStop
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTimerStart
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTimerSoftTask
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTimerModuleTickNotify
</UL>

<P><STRONG><a name="[87]"></a>lztSemGetInfo</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lztsem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztEventWaitCount
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskExitCritical
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskEnterCritical
</UL>

<P><STRONG><a name="[88]"></a>lztSemDestroy</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lztsem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztEventRemoveAll
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskExitCritical
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskEnterCritical
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskSched
</UL>

<P><STRONG><a name="[56]"></a>lztTaskEnterCritical</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lztswitch.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTimerGetInfo
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTimerStop
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTimerStart
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskDelay
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskGetInfo
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskDeleteSelf
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskIsRequestedDelete
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskRequestDelete
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskForceDelete
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskWakeUp
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskSuspend
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztSemDestroy
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztSemGetInfo
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztSemNotify
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztSemNoWaitGet
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztSemWait
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztMutexGetInfo
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztMutexDestroy
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztMutexNotify
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztMutexNoWaitGet
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztMutexWait
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztEventWaitCount
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztEventRemoveAll
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztEventWakeUpTask
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztEventWakeUp
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztEventWait
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTimerModuleTickNotify
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztEventRemoveTask
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idleTaskEntry
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskSystemTickHandler
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskSchedEnable
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskSched
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskSchedDisable
</UL>

<P><STRONG><a name="[57]"></a>lztTaskExitCritical</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lztswitch.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTimerGetInfo
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTimerStop
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTimerStart
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskDelay
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskGetInfo
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskDeleteSelf
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskIsRequestedDelete
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskRequestDelete
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskForceDelete
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskWakeUp
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskSuspend
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztSemDestroy
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztSemGetInfo
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztSemNotify
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztSemNoWaitGet
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztSemWait
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztMutexGetInfo
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztMutexDestroy
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztMutexNotify
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztMutexNoWaitGet
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztMutexWait
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztEventWaitCount
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztEventRemoveAll
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztEventWakeUpTask
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztEventWakeUp
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztEventWait
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTimerModuleTickNotify
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztEventRemoveTask
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idleTaskEntry
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskSystemTickHandler
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskSchedEnable
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskSched
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskSchedDisable
</UL>

<P><STRONG><a name="[4d]"></a>saveAndLoadStackAddr</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, lztswitch.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[76]"></a>lztTaskRunFirst</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, lztswitch.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5a]"></a>lztTaskSwitch</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lztswitch.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskSched
</UL>

<P><STRONG><a name="[75]"></a>lztTaskInit</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, lzttask.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lztTaskInit &rArr; lztTaskSchedRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztHooksTaskInit
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztNodeInit
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskSchedRdy
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTimerInitTask
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztInitApp
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8c]"></a>lztTaskSuspend</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lzttask.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskExitCritical
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskEnterCritical
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskSchedUnRdy
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskSched
</UL>

<P><STRONG><a name="[8d]"></a>lztTaskWakeUp</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lzttask.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskExitCritical
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskEnterCritical
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskSchedRdy
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskSched
</UL>

<P><STRONG><a name="[d6]"></a>lztTaskSetCleanCallFunc</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lzttask.o(.text), UNUSED)

<P><STRONG><a name="[8e]"></a>lztTaskForceDelete</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, lzttask.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskExitCritical
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskEnterCritical
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTimeTaskRemove
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskSchedRemove
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskSched
</UL>

<P><STRONG><a name="[8f]"></a>lztTaskRequestDelete</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lzttask.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskExitCritical
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskEnterCritical
</UL>

<P><STRONG><a name="[90]"></a>lztTaskIsRequestedDelete</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lzttask.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskExitCritical
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskEnterCritical
</UL>

<P><STRONG><a name="[91]"></a>lztTaskDeleteSelf</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, lzttask.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskExitCritical
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskEnterCritical
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskSchedRemove
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskSched
</UL>

<P><STRONG><a name="[92]"></a>lztTaskGetInfo</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, lzttask.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskExitCritical
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskEnterCritical
</UL>

<P><STRONG><a name="[93]"></a>lztTaskDelay</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lzttime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = lztTaskDelay &rArr; lztTaskSched &rArr; lztTaskHighestReady &rArr; lztBitmapGetFirstSet
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskExitCritical
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskEnterCritical
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTimeTaskWait
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskSchedUnRdy
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskSched
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interruptByOtherTask
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task4Entry
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task3Entry
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;waitEvent
</UL>

<P><STRONG><a name="[94]"></a>lztTimerInit</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, lzttimer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztNodeInit
</UL>

<P><STRONG><a name="[95]"></a>lztTimerStart</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, lzttimer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztSemNotify
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztSemWait
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskExitCritical
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskEnterCritical
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztListAddLast
</UL>

<P><STRONG><a name="[96]"></a>lztTimerStop</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, lzttimer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztSemNotify
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztSemWait
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskExitCritical
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskEnterCritical
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTimerDestroy
</UL>

<P><STRONG><a name="[97]"></a>lztTimerDestroy</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lzttimer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTimerStop
</UL>

<P><STRONG><a name="[98]"></a>lztTimerGetInfo</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lzttimer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskExitCritical
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskEnterCritical
</UL>

<P><STRONG><a name="[6c]"></a>lztTimerModuleTickNotify</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lzttimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = lztTimerModuleTickNotify &rArr; lztSemNotify &rArr; lztEventWakeUp &rArr; lztTimeTaskWakeUp
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTimerCallFuncList
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztSemNotify
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskExitCritical
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskSystemTickHandler
</UL>

<P><STRONG><a name="[73]"></a>lztTimerModuleInit</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lzttimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lztTimerModuleInit &rArr; lztSemInit &rArr; lztEventInit
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztSemInit
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[70]"></a>lztTimerInitTask</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lzttimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = lztTimerInitTask &rArr; lztTaskInit &rArr; lztTaskSchedRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskInit
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idleTaskEntry
</UL>

<P><STRONG><a name="[d7]"></a>lztTimerTask</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lzttimer.o(.text), UNUSED)

<P><STRONG><a name="[9a]"></a>waitEvent</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskDelay
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztMutexNotify
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztMutexWait
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[9c]"></a>processEvent</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztMutexNotify
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztMutexWait
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[9d]"></a>notifyOtherTask</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztMutexNotify
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztMutexWait
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[9e]"></a>task1Entry</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = task1Entry &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(.text)
</UL>
<P><STRONG><a name="[9f]"></a>task2Entry</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = task2Entry &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(.text)
</UL>
<P><STRONG><a name="[a0]"></a>task3Entry</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = task3Entry &rArr; lztTaskDelay &rArr; lztTaskSched &rArr; lztTaskHighestReady &rArr; lztBitmapGetFirstSet
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(.text)
</UL>
<P><STRONG><a name="[a1]"></a>task4Entry</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = task4Entry &rArr; lztTaskDelay &rArr; lztTaskSched &rArr; lztTaskHighestReady &rArr; lztBitmapGetFirstSet
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(.text)
</UL>
<P><STRONG><a name="[6f]"></a>lztInitApp</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = lztInitApp &rArr; halInit &rArr; usartInit &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halInit
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskInit
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idleTaskEntry
</UL>

<P><STRONG><a name="[71]"></a>lztSetSysTickPeriod</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, lztcpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = lztSetSysTickPeriod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idleTaskEntry
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, lztcpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SysTick_Handler &rArr; lztTaskSystemTickHandler &rArr; lztTimerModuleTickNotify &rArr; lztSemNotify &rArr; lztEventWakeUp &rArr; lztTimeTaskWakeUp
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskSystemTickHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>lztHooksCpuIdle</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lzthooks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idleTaskEntry
</UL>

<P><STRONG><a name="[6d]"></a>lztHooksSysTick</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lzthooks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskSystemTickHandler
</UL>

<P><STRONG><a name="[59]"></a>lztHooksTaskSwitch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lzthooks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskSched
</UL>

<P><STRONG><a name="[8b]"></a>lztHooksTaskInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lzthooks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskInit
</UL>

<P><STRONG><a name="[a5]"></a>usartInit</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, hal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = usartInit &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztMutexInit
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halInit
</UL>

<P><STRONG><a name="[aa]"></a>interruptInit</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, hal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = interruptInit &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetPriorityGrouping
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EncodePriority
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halInit
</UL>

<P><STRONG><a name="[ae]"></a>targetEnterSleep</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_EnterSTOPMode
</UL>

<P><STRONG><a name="[b0]"></a>uartSendChar</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, hal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uartSendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[4a]"></a>fputc</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, hal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fputc &rArr; uartSendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartSendChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf5.o(i.__0printf$5)
</UL>
<P><STRONG><a name="[b3]"></a>interruptByOtherTask</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, hal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskDelay
</UL>

<P><STRONG><a name="[d8]"></a>interruptEnable</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, hal.o(.text), UNUSED)

<P><STRONG><a name="[d9]"></a>interruptByIRQ</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, hal.o(.text), UNUSED)

<P><STRONG><a name="[b4]"></a>IRQHighHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WWDG_IRQHandler
</UL>

<P><STRONG><a name="[b5]"></a>IRQMiddleHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PVD_IRQHandler
</UL>

<P><STRONG><a name="[da]"></a>IRQLowHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hal.o(.text), UNUSED)

<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WWDG_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQHighHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PVD_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQMiddleHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[b6]"></a>printMem</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, hal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztMutexNotify
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztMutexWait
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[a2]"></a>halInit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = halInit &rArr; usartInit &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interruptInit
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usartInit
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztInitApp
</UL>

<P><STRONG><a name="[b7]"></a>GPIO_DeInit</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[b9]"></a>GPIO_AFIODeInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[a7]"></a>GPIO_Init</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usartInit
</UL>

<P><STRONG><a name="[db]"></a>GPIO_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[dc]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[dd]"></a>GPIO_ReadInputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[de]"></a>GPIO_ReadOutputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[df]"></a>GPIO_ReadOutputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[e0]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[e1]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[e2]"></a>GPIO_WriteBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[e3]"></a>GPIO_Write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[e4]"></a>GPIO_PinLockConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[e5]"></a>GPIO_EventOutputConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[e6]"></a>GPIO_EventOutputCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[e7]"></a>GPIO_PinRemapConfig</STRONG> (Thumb, 138 bytes, Stack size 20 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[e8]"></a>GPIO_EXTILineConfig</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[e9]"></a>GPIO_ETH_MediaInterfaceConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[ba]"></a>PWR_DeInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f10x_pwr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>

<P><STRONG><a name="[ea]"></a>PWR_BackupAccessCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_pwr.o(.text), UNUSED)

<P><STRONG><a name="[eb]"></a>PWR_PVDCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_pwr.o(.text), UNUSED)

<P><STRONG><a name="[ec]"></a>PWR_PVDLevelConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_pwr.o(.text), UNUSED)

<P><STRONG><a name="[ed]"></a>PWR_WakeUpPinCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_pwr.o(.text), UNUSED)

<P><STRONG><a name="[af]"></a>PWR_EnterSTOPMode</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f10x_pwr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;targetEnterSleep
</UL>

<P><STRONG><a name="[ee]"></a>PWR_EnterSTANDBYMode</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f10x_pwr.o(.text), UNUSED)

<P><STRONG><a name="[ef]"></a>PWR_GetFlagStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_pwr.o(.text), UNUSED)

<P><STRONG><a name="[f0]"></a>PWR_ClearFlag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_pwr.o(.text), UNUSED)

<P><STRONG><a name="[f1]"></a>RCC_DeInit</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[f2]"></a>RCC_HSEConfig</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[bd]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
</UL>

<P><STRONG><a name="[bc]"></a>RCC_WaitForHSEStartUp</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>

<P><STRONG><a name="[f3]"></a>RCC_AdjustHSICalibrationValue</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[f4]"></a>RCC_HSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[f5]"></a>RCC_PLLConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[f6]"></a>RCC_PLLCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[f7]"></a>RCC_SYSCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[f8]"></a>RCC_GetSYSCLKSource</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[f9]"></a>RCC_HCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[fa]"></a>RCC_PCLK1Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[fb]"></a>RCC_PCLK2Config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[fc]"></a>RCC_ITConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[fd]"></a>RCC_USBCLKConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[fe]"></a>RCC_ADCCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[ff]"></a>RCC_LSEConfig</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[100]"></a>RCC_LSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[101]"></a>RCC_RTCCLKConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[102]"></a>RCC_RTCCLKCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[bf]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 192 bytes, Stack size 12 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[103]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[a6]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usartInit
</UL>

<P><STRONG><a name="[104]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[b8]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_AFIODeInit
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DeInit
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
</UL>

<P><STRONG><a name="[bb]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_DeInit
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
</UL>

<P><STRONG><a name="[105]"></a>RCC_BackupResetCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[106]"></a>RCC_ClockSecuritySystemCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[107]"></a>RCC_MCOConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[108]"></a>RCC_ClearFlag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[109]"></a>RCC_GetITStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[10a]"></a>RCC_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[be]"></a>USART_DeInit</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[a8]"></a>USART_Init</STRONG> (Thumb, 210 bytes, Stack size 56 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usartInit
</UL>

<P><STRONG><a name="[10b]"></a>USART_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[10c]"></a>USART_ClockInit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[10d]"></a>USART_ClockStructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[a9]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usartInit
</UL>

<P><STRONG><a name="[10e]"></a>USART_ITConfig</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[10f]"></a>USART_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[110]"></a>USART_SetAddress</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[111]"></a>USART_WakeUpConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[112]"></a>USART_ReceiverWakeUpCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[113]"></a>USART_LINBreakDetectLengthConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[114]"></a>USART_LINCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[b1]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartSendChar
</UL>

<P><STRONG><a name="[115]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[116]"></a>USART_SendBreak</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[117]"></a>USART_SetGuardTime</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[118]"></a>USART_SetPrescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[119]"></a>USART_SmartCardCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[11a]"></a>USART_SmartCardNACKCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[11b]"></a>USART_HalfDuplexCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[11c]"></a>USART_OverSampling8Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[11d]"></a>USART_OneBitMethodCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[11e]"></a>USART_IrDAConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[11f]"></a>USART_IrDACmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[b2]"></a>USART_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartSendChar
</UL>

<P><STRONG><a name="[120]"></a>USART_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[121]"></a>USART_GetITStatus</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[122]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>SystemInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[a3]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztSetSysTickPeriod
</UL>

<P><STRONG><a name="[a4]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztSetSysTickPeriod
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[c5]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[123]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[124]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[c4]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[89]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTaskInit
</UL>

<P><STRONG><a name="[125]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[c6]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[c3]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[126]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[c2]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[127]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[4c]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[128]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[c8]"></a>__0printf$5</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf5.o(i.__0printf$5), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[129]"></a>__1printf$5</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf5.o(i.__0printf$5), UNUSED)

<P><STRONG><a name="[9b]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf5.o(i.__0printf$5))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printMem
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task2Entry
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task1Entry
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notifyOtherTask
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processEvent
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;waitEvent
</UL>

<P><STRONG><a name="[12a]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[12b]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[12c]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[99]"></a>lztTimerCallFuncList</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, lzttimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lztTimerCallFuncList
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztListRemove
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztListNext
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztListFirst
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztListCount
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTimerSoftTask
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTimerModuleTickNotify
</UL>

<P><STRONG><a name="[47]"></a>lztTimerSoftTask</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, lzttimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = lztTimerSoftTask &rArr; lztSemWait &rArr; lztEventWait &rArr; lztTimeTaskWait
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztTimerCallFuncList
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztSemNotify
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lztSemWait
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lzttimer.o(.text)
</UL>
<P><STRONG><a name="[ad]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, hal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interruptInit
</UL>

<P><STRONG><a name="[ac]"></a>NVIC_EncodePriority</STRONG> (Thumb, 64 bytes, Stack size 20 bytes, hal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = NVIC_EncodePriority
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interruptInit
</UL>

<P><STRONG><a name="[ab]"></a>__NVIC_GetPriorityGrouping</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interruptInit
</UL>

<P><STRONG><a name="[c1]"></a>SetSysClockTo72</STRONG> (Thumb, 214 bytes, Stack size 12 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[c0]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[c9]"></a>_printf_core</STRONG> (Thumb, 658 bytes, Stack size 104 bytes, printf5.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$5
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
